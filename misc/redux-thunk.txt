// store.ts
import { configureStore } from '@reduxjs/toolkit';
import rootReducer from './reducers';
import thunk from 'redux-thunk';

export const store = configureStore({
  reducer: rootReducer,
  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(thunk)
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;


// actions.ts
export const FETCH_START = 'FETCH_START';
export const FETCH_SUCCESS = 'FETCH_SUCCESS';
export const FETCH_ERROR = 'FETCH_ERROR';

export const fetchStart = () => ({
  type: FETCH_START
});

export const fetchSuccess = ({ key, data }: { key: string; data: any }) => ({
  type: FETCH_SUCCESS,
  payload: { key, data }
});

export const fetchError = (message: string) => ({
  type: FETCH_ERROR,
  payload: message
});


// reducers.ts
import { FETCH_START, FETCH_SUCCESS, FETCH_ERROR } from './actions';

const initialState = {
  users: [],
  posts: [],
  loading: false,
  error: null
};

const rootReducer = (state = initialState, action: any) => {
  switch (action.type) {
    case FETCH_START:
      return {
        ...state,
        loading: true,
        error: null
      };
    case FETCH_SUCCESS:
      return {
        ...state,
        loading: false,
        [action.payload.key]: action.payload.data
      };
    case FETCH_ERROR:
      return {
        ...state,
        loading: false,
        error: action.payload
      };
    default:
      return state;
  }
};

export default rootReducer;


// fetchData.ts
import { AppDispatch } from "@/lib/store";
import { fetchStart, fetchSuccess, fetchError } from './actions';

// Curried function: fetchData(endpoint) returns a function that accepts dispatch
export const fetchData = (endpoint: "users" | "posts") => {
  return async (dispatch: AppDispatch) => {
    dispatch(fetchStart());

    try {
      const response = await fetch(
        `https://jsonplaceholder.typicode.com/${endpoint}`
      );
      const data = await response.json();
      dispatch(fetchSuccess({ key: endpoint, data })); // Store data under `users` or `posts`
    } catch (error) {
      dispatch(fetchError("Failed to fetch data"));
    }
  };
};


// app.tsx or index.tsx
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import { store } from './lib/store';
import App from './App';

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);
